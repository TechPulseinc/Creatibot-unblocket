import UIKit
import CoreData

// MARK: - Message Model
struct Message: Codable {
    let text: String
    let isUser: Bool
    let timestamp: Date
    
    var formattedTime: String {
        let formatter = DateFormatter()
        formatter.timeStyle = .short
        return formatter.string(from: timestamp)
    }
}

// MARK: - Response Categories
enum CreativeCategory: String, CaseIterable {
    case business = "Byznys"
    case art = "Umění"
    case technology = "Technologie"
    case innovation = "Inovace"
    
    var responses: [String] {
        switch self {
        case .business:
            return [
                "Jak by tento nápad mohl generovat příjem?",
                "Kdo by byl ideální cílovou skupinou?",
                "Jaké jsou možnosti škálování tohoto nápadu?"
            ]
        case .art:
            return [
                "Jak by se dal tento koncept vizuálně vyjádřit?",
                "Jaké emoce by mělo dílo vyvolávat?",
                "Jak by se daly kombinovat různé umělecké styly?"
            ]
        case .technology:
            return [
                "Jaké technologie by mohly tento nápad posunout dál?",
                "Jak by umělá inteligence mohla pomoct?",
                "Jaké technické výzvy by bylo třeba překonat?"
            ]
        case .innovation:
            return [
                "Co kdybychom tento nápad otočili naruby?",
                "Jak by se dal kombinovat s něčím nečekaným?",
                "Jaký problém budoucnosti by mohl řešit?"
            ]
        }
    }
}

class CreativeBotViewController: UIViewController {
    
    // MARK: - Properties
    private let persistentContainer: NSPersistentContainer = {
        let container = NSPersistentContainer(name: "ChatHistory")
        container.loadPersistentStores { description, error in
            if let error = error {
                print("Core Data failed to load: \(error.localizedDescription)")
            }
        }
        return container
    }()
    
    private var messages: [Message] = []
    private var selectedCategory: CreativeCategory = .innovation
    
    private let themeSwitch: UISwitch = {
        let switch_ = UISwitch()
        switch_.addTarget(self, action: #selector(themeSwitchChanged), for: .valueChanged)
        return switch_
    }()
    
    private lazy var categorySegmentControl: UISegmentedControl = {
        let control = UISegmentedControl(items: CreativeCategory.allCases.map { $0.rawValue })
        control.selectedSegmentIndex = 0
        control.addTarget(self, action: #selector(categoryChanged), for: .valueChanged)
        return control
    }()
    
    private let chatTextView: UITextView = {
        let textView = UITextView()
        textView.backgroundColor = .systemBackground
        textView.font = .systemFont(ofSize: 16)
        textView.isEditable = false
        textView.layer.cornerRadius = 12
        return textView
    }()
    
    private let inputTextField: UITextField = {
        let textField = UITextField()
        textField.backgroundColor = .secondarySystemBackground
        textField.placeholder = "Zadej zprávu..."
        textField.layer.cornerRadius = 20
        textField.leftView = UIView(frame: CGRect(x: 0, y: 0, width: 15, height: 0))
        textField.leftViewMode = .always
        return textField
    }()
    
    private let sendButton: UIButton = {
        let button = UIButton(type: .system)
        button.setImage(UIImage(systemName: "arrow.up.circle.fill"), for: .normal)
        button.tintColor = .systemBlue
        button.contentVerticalAlignment = .fill
        button.contentHorizontalAlignment = .fill
        button.addTarget(self, action: #selector(sendMessage), for: .touchUpInside)
        return button
    }()
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        loadMessages()
        setupNavigationBar()
    }
    
    // MARK: - UI Setup private func setupUI() {
        view.backgroundColor = .systemBackground
        view.addSubview(categorySegmentControl)
        view.addSubview(chatTextView)
        view.addSubview(inputTextField)
        view.addSubview(sendButton)
    }
    
    @objc private func sendMessage() {
        guard let text = inputTextField.text?.trimmingCharacters(in: .whitespacesAndNewlines),
              !text.isEmpty else { return }
        
        let userMessage = Message(text: text, isUser: true, timestamp: Date())
        messages.append(userMessage)
        
        inputTextField.text = ""
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            let botResponse = self.generateResponse()
            let botMessage = Message(text: botResponse, isUser: false, timestamp: Date())
            self.messages.append(botMessage)
            self.updateChatView()
            self.saveMessages()
        }
        
        updateChatView()
    }
    
    private func generateResponse() -> String {
        return selectedCategory.responses.randomElement() ?? "Pojďme to prozkoumat z jiného úhlu!"
    }
    
    private func updateChatView() {
        // Implementace pro aktualizaci UI
    }

    private func saveMessages() {
        let context = persistentContainer.viewContext
        
        do {
            // Smazání starých zpráv
            let fetchRequest: NSFetchRequest<NSFetchRequestResult> = NSFetchRequest(entityName: "ChatMessage")
            let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
            try context.execute(deleteRequest)
            
            // Uložení nových zpráv
            for message in messages {
                let chatMessage = NSEntityDescription.insertNewObject(forEntityName: "ChatMessage", into: context)
                chatMessage.setValue(message.text, forKey: "text")
                chatMessage.setValue(message.isUser, forKey: "isUser") chatMessage.setValue(message.timestamp, forKey: "timestamp")
            }
            
            try context.save()
        } catch {
            print("Failed to save messages: \(error)")
        }
    }
    
    private func loadMessages() {
        let context = persistentContainer.viewContext
        let fetchRequest: NSFetchRequest<ChatMessage> = ChatMessage.fetchRequest()
        
        do {
            let results = try context.fetch(fetchRequest)
            messages = results.map {
                Message(text: $0.text!, isUser: $0.isUser, timestamp: $0.timestamp!)
            }
            updateChatView()
        } catch {
            print("Failed to load messages: \(error)")
        }
    }
}